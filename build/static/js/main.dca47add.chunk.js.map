{"version":3,"sources":["components/date-picker/date-picker.js","config/config.js","redux/reducers/index.js","redux/reducers/auth.js","redux/reducers/city-list.js","redux/reducers/nationality-list.js","redux/store/index.js","redux/actions/city-list.js","components/hotel-search/hotel-search.js","redux/actions/auth.js","redux/actions/nationality-list.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["DatePickerComponent","minDate","startDateChange","useState","minimumDate","setMinimumDate","selectedDate","setSelectedDate","useEffect","selected","onChange","date","console","log","dateFormat","className","CONFIG","combineReducers","authData","state","loading","payload","error","action","type","cityListData","nationalityListData","middleware","applyMiddleware","thunk","createLogger","createStore","reducers","cityListRequest","value","dispatch","a","store","getState","axios","method","url","headers","access_token","data","searchItem","response","message","HotelSearch","travelModalShow","setTravelModalShow","Date","checkinDate","setCheckinDate","checkoutDate","setCheckoutDate","searching","setSearching","citySuggestions","setCitySuggestions","cityValue","setCityValue","nationalitySuggestions","setNationalitySuggestions","nationalityValue","setNationalityValue","minCheckoutDate","setMinCheckoutDate","useSelector","useDispatch","authAPI","initMinDate","Object","keys","length","nationalityListAPI","status","searchedCity","splice","hotelMasterList","requestData","client_id","grant_type","scope","qs","stringify","addDays","getCitySuggestions","inputValue","trim","toLowerCase","inputPropsCity","placeholder","event","newValue","getNationalitySuggestions","arr","countryList","filter","val","countryName","includes","inputPropsNationality","checkinStartDateChange","checkoutStartDateChange","today","setDate","getDate","memoCheckinDateComponent","useMemo","memoCheckoutDateComponent","onClick","suggestions","onSuggestionsFetchRequested","onSuggestionsClearRequested","getSuggestionValue","suggestion","cityName","hotelName","renderSuggestion","countryCode","countyCode","inputProps","format","e","stopPropagation","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.dca47add.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"./date-picker.scss\";\n\nconst DatePickerComponent = ({ minDate, startDateChange }) => {\n    // const [startDate, setStartDate] = useState(minDate);\n    const [minimumDate, setMinimumDate] = useState(minDate);\n    const [selectedDate, setSelectedDate] = useState(minDate);\n\n    \n    useEffect(() => {\n        // console.log('min date change => ', minDate);\n        setMinimumDate(minDate);\n        setSelectedDate(minDate);\n    }, [minDate]);\n\n    return (\n        <DatePicker\n            selected={selectedDate}\n            // onChange={this.handleChange}\n            minDate={minimumDate}\n            onChange={(date) => {\n                    console.log(\"Date => \", date);\n                    setSelectedDate(date);\n                    startDateChange(date);\n                }\n            }\n            dateFormat=\"d MMMM, yyyy\"\n            className=\"date-picker\"\n        />\n    )\n}\n\nexport default DatePickerComponent;","export const CONFIG =  {\n    AUTH_API_URL: \"https://htrp-idp.auth.ap-southeast-1.amazoncognito.com/oauth2/token\",\n    BASIC_AUTH_TOKEN: \"NHMzYjlmMDk5a2VxczUxODM5OHRlbmxwNjI6amIxdmRjZWs5MmRmMzk2MG5waDN2bWZxdGpzbGoxZDh2cGE0ZDhmZW1qMzMwNmFzOGdr\",\n    NATIONALITY_LIST_API_URL: \"https://nonprod-htrp-usr-mgmt.hungrytripper.com/htrp-usr-mgmt/api/v1/countryList\",\n    CITY_LIST_API_URL: \"https://nonprod-htrp-hotel-inquiry.hungrytripper.com/htrp-hotel-inquiry/api/v1/hotelSearch\",\n\n}","import { combineReducers } from \"redux\";\nimport authData from \"./auth\";\nimport cityListData from \"./city-list\";\nimport nationalityListData from \"./nationality-list\";\n\nexport default combineReducers({\n    authData,\n    cityListData,\n    nationalityListData\n})","export default (\n    state = {\n        loading: false,\n        payload: {},\n        error: null\n    },\n    action\n) => {\n    switch(action.type) {\n        case \"AUTH_REQUEST\":\n            return { ...state, loading: true, payload: {}, error: null };\n        case \"AUTH_REQUEST_SUCCESS\":\n            /* let obj = { access_token: action?.payload?.data.access_token , email};\n            localStorage.setItem(CONFIG.LOCALSTORAGE_USER, JSON.stringify(obj)); */\n            return { ...state, loading: false, payload: action.payload, error: null };\n        case \"AUTH_REQUEST_ERROR\":\n            return { ...state, loading: false, payload: {}, error: action.payload };\n        case \"AUTH_RESET\":\n            return { loading: false, payload: {}, error: null };\n        default: \n            return state;\n    }\n}","export default (\n    state = {\n        loading: false,\n        payload: {},\n        error: null\n    },\n    action\n) => {\n    switch(action.type) {\n        case \"CITY_LIST_REQUEST\":\n            return { ...state, loading: true, payload: {}, error: null };\n        case \"CITY_LIST_REQUEST_SUCCESS\":\n            /* let obj = { access_token: action?.payload?.data.access_token , email};\n            localStorage.setItem(CONFIG.LOCALSTORAGE_USER, JSON.stringify(obj)); */\n            return { ...state, loading: false, payload: action.payload, error: null };\n        case \"CITY_LIST_REQUEST_ERROR\":\n            return { ...state, loading: false, payload: {}, error: action.payload };\n        case \"CITY_LIST_RESET\":\n            return { loading: false, payload: {}, error: null };\n        default: \n            return state;\n    }\n}","export default (\n    state = {\n        loading: false,\n        payload: {},\n        error: null\n    },\n    action\n) => {\n    switch(action.type) {\n        case \"NATIONALITY_LIST_REQUEST\":\n            return { ...state, loading: true, payload: {}, error: null };\n        case \"NATIONALITY_LIST_REQUEST_SUCCESS\":\n            /* let obj = { access_token: action?.payload?.data.access_token , email};\n            localStorage.setItem(CONFIG.LOCALSTORAGE_USER, JSON.stringify(obj)); */\n            return { ...state, loading: false, payload: action.payload, error: null };\n        case \"NATIONALITY_LIST_REQUEST_ERROR\":\n            return { ...state, loading: false, payload: {}, error: action.payload };\n        case \"NATIONALITY_LIST_RESET\":\n            return { loading: false, payload: {}, error: null };\n        default: \n            return state;\n    }\n}","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { createLogger } from \"redux-logger\";\nimport reducers from \"../reducers\";\n\n\nconst middleware = applyMiddleware(thunk, createLogger());\n\nexport default createStore(reducers, middleware);","import axios from \"axios\";\nimport qs from 'qs';\nimport { CONFIG } from \"../../config/config\";\nimport store from \"../store\";\n\nexport const cityListRequest = (value) => {\n    return async (dispatch) => {\n        try {\n            const {authData} = store.getState();\n            dispatch({type: \"CITY_LIST_REQUEST\", payload: {}});\n            // console.log('authData => ', authData)\n            const { data: response } = await axios({\n                method: \"post\",\n                url: CONFIG.CITY_LIST_API_URL,\n                headers: {\n                    \"Authorization\": `Bearer ${authData.payload.access_token}` \n                },\n                data: {\n                    searchItem: value\n                }\n            });\n            // console.log(\"cityListRequest response => \", response);\n            dispatch({type: \"CITY_LIST_REQUEST_SUCCESS\", payload: response});\n        } catch(err) {\n            console.log(\"error in cityListRequest => \", err);\n            dispatch({type: \"CITY_LIST_REQUEST_ERROR\", payload: {message: \"Something went wrong\"}});\n        }\n    }\n}\n","import React, { useState, useEffect, useMemo } from \"react\";\nimport \"./hotel-search.scss\";\nimport Autosuggest from 'react-autosuggest';\nimport { useForm } from 'react-hook-form'\nimport DatePickerComponent from \"../date-picker/date-picker\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { authRequest } from \"../../redux/actions/auth\";\nimport { cityListRequest } from \"../../redux/actions/city-list\";\nimport { nationalityListRequest } from \"../../redux/actions/nationality-list\";\nimport Moment from \"react-moment\";\n\n\nconst HotelSearch = () => {\n    /* const { register, handleSubmit, errors, getValues } = useForm({\n        mode: \"onBlur\"\n    }) */\n    const [travelModalShow, setTravelModalShow] = useState(false);\n    const [checkinDate, setCheckinDate] = useState(new Date());\n    const [checkoutDate, setCheckoutDate] = useState(new Date());\n    const [searching, setSearching] = useState(false);\n    const [citySuggestions, setCitySuggestions] = useState([]);\n    const [cityValue, setCityValue] = useState(\"Goa\");\n    const [nationalitySuggestions, setNationalitySuggestions] = useState([]);\n    const [nationalityValue, setNationalityValue] = useState(\"India\");\n    const [ minCheckoutDate, setMinCheckoutDate ] = useState(new Date());\n    const {authData, cityListData, nationalityListData} = useSelector(state => ({authData: state.authData, cityListData: state.cityListData, nationalityListData: state.nationalityListData}));\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        authAPI();\n        initMinDate();\n    }, []);\n\n    useEffect(() => {\n        if(!authData.error && Object.keys(authData.payload).length) {\n            console.log(\"auth request changed => \", authData);\n            nationalityListAPI();\n        }\n    }, [authData]);\n\n    useEffect(() => {\n        if(!cityListData.error && Object.keys(cityListData.payload).length) {\n            console.log(\"city list data changed => \", cityListData);\n            let data = [];\n            if(cityListData.payload.response.status == \"SUCCESS\") {\n                if(cityListData.payload.response.response.searchedCity) {\n                    data = cityListData.payload.response.response.searchedCity.splice(0, 10)\n                } else {\n                    data = cityListData.payload.response.response.hotelMasterList.splice(0, 10)\n                }\n                setCitySuggestions(data);\n            }\n        }\n    }, [cityListData]);\n    useEffect(() => {\n        console.log('nationalitySuggestions chan => ', nationalitySuggestions)\n    }, [nationalitySuggestions])\n\n    const authAPI = async () => {\n        console.log(\"AUTH API\");\n        await dispatch(authRequest());\n    }\n    const initMinDate = () => {\n        setMinCheckoutDate(addDays(new Date(), 1));\n        setCheckoutDate(addDays(new Date(), 1))\n    }\n    const nationalityListAPI = () => {\n        dispatch(nationalityListRequest());\n    }\n\n    const getCitySuggestions = async (value) => {\n        console.log(\"input value change => \", value);\n        const inputValue = value.trim().toLowerCase();\n        if(inputValue.length > 2)\n            dispatch(cityListRequest(inputValue));\n        return [];\n            \n    };\n    const getSuggestionValue = suggestion => {\n        return suggestion.cityName || suggestion.hotelName;\n    };\n    const renderSuggestion = suggestion => {\n        // console.log('suggestion => ', suggestion)\n        return    (\n                <span className=\"suggestion-content dancounsell\">\n                    <span className=\"name\">\n                        <span className=\"highlight\">{suggestion.cityName || suggestion.hotelName}</span>\n                        <span className=\"\">{suggestion.countryCode || suggestion.countyCode}</span>\n                    </span>\n                </span>\n            )\n        \n    };\n    const onCitySuggestionsFetchRequested = ({ value }) => {\n        setCitySuggestions(getCitySuggestions(value));\n    };\n    const onSuggestionsClearRequested = () => {\n        setCitySuggestions([]);\n    };\n    const onCityChange = (event, { newValue }) => {\n        // console.log('city change');\n        setCityValue(newValue);\n    };\n\n    // Autosuggest will pass through all these props to the input.\n    const inputPropsCity = {\n        placeholder: 'City / Hotel',\n        value: cityValue,\n        onChange: onCityChange\n    };\n\n    \n\n    const onNationalityChange = (event, {newValue}) => {\n        // console.log('new value => ', newValue)\n        setNationalityValue(newValue);\n    }\n    const onNationalitySuggestionsClearRequested = () => {\n        setNationalitySuggestions([]);\n    };\n    const onNationalitySuggestionsFetchRequested = ({ value }) => {\n        console.log('vl => ', value)\n        setNationalitySuggestions(getNationalitySuggestions(value));\n    };\n    const getNationalitySuggestions = (value) => {\n        // console.log(\"input value change => \", value);\n        const inputValue = value.trim().toLowerCase();\n        if(Object.keys(nationalityListData.payload).length) {\n            let countryList = nationalityListData?.payload?.response?.response?.countryList;\n            let arr = countryList.filter(val => (val.countryName).toLowerCase().includes(inputValue));\n            arr = arr.length ? arr.splice(0, 10): [];\n            console.log(\" Nationality => \",arr );\n            // setNationalitySuggestions(arr);\n            return arr;\n        }\n        return [];\n    };\n    const renderNationalitySuggestion = suggestion => {\n        console.log('suggestion => ', suggestion)\n        return    (\n                <span className=\"suggestion-content dancounsell\">\n                    <span className=\"name\">\n                        <span className=\"highlight\">{suggestion.countryName}</span>\n                        {/* <span className=\"\">{suggestion.countryCode}</span> */}\n                    </span>\n                </span>\n            )\n    };\n    const getNationalitySuggestionValue = suggestion => {\n        return suggestion.countryName;\n    };\n    const inputPropsNationality = {\n        placeholder: 'Nationality',\n        value: nationalityValue,\n        onChange: onNationalityChange\n    }\n\n    const checkinStartDateChange = (val) => {\n        // console.log(\"changed checkinStartDateChange => \", val);\n        setMinCheckoutDate(addDays(new Date(val), 1));\n        setCheckinDate(new Date(val));\n        setCheckoutDate(addDays(new Date(val), 1));\n    }\n\n    const checkoutStartDateChange = (val) => {\n        setCheckoutDate(new Date(val));\n    }\n\n    const addDays = (date, val) => {\n        let today = new Date(date);\n        return new Date(new Date().setDate(today.getDate() + val))\n    }\n\n    const onSearch = () => {\n        console.log(\"nationality value => \", nationalityValue);\n        setSearching(true);\n    }\n\n\n    /* Memo of DatePicker Component */\n    const memoCheckinDateComponent = useMemo(() => (\n        <DatePickerComponent\n            minDate={new Date()}\n            startDateChange={checkinStartDateChange}\n        />\n    ), []);\n    /* Memo of DatePicker Component */\n    const memoCheckoutDateComponent = useMemo(() => (\n        <DatePickerComponent \n            minDate={minCheckoutDate}\n            startDateChange={checkoutStartDateChange}\n        />\n    ), [minCheckoutDate]);\n\n    return (\n        <main className=\"hotel-search-content\" onClick={() => {\n            if(travelModalShow)\n                setTravelModalShow(false)\n        }}>\n            <section className=\"hotel-search-section\">\n                <div className=\"container\">\n                    <div className=\"row pt-5\">\n                        <div className=\"col-lg-12\">\n                            <div className=\"widget-section\">\n                                <div className=\"hotel-icon-div\">\n                                    <a className=\"\"><i className=\"fa fa-bed\"></i>Hotels</a>\n                                </div>\n                                <div></div>\n                                <div className=\"form-div\">\n                                    <div className=\"form-content\">\n                                        <div className=\"city-div\">\n                                            <p className=\"\">City / Hotel</p>\n                                            <h1 className=\"\">\n                                                <Autosuggest\n                                                    suggestions={citySuggestions}\n                                                    onSuggestionsFetchRequested={onCitySuggestionsFetchRequested}\n                                                    onSuggestionsClearRequested={onSuggestionsClearRequested}\n                                                    getSuggestionValue={getSuggestionValue}\n                                                    renderSuggestion={renderSuggestion}\n                                                    inputProps={inputPropsCity}\n                                                />\n                                            </h1>\n                                            \n                                        </div>\n                                        <div className=\"checkin-div\">\n                                            <p>Check In Date</p>\n                                            <h1>\n                                                {memoCheckinDateComponent}\n                                            </h1>\n                                            {/* <p>Tuesday</p> */}\n                                            <p>\n                                                <Moment format=\"dddd\">{checkinDate}</Moment>\n                                            </p>\n\n                                        </div>\n                                        <div className=\"checkout-div\">\n                                            <p>Check Out Date</p>\n                                            <h1>\n                                                {memoCheckoutDateComponent}\n                                            </h1>\n                                            <p>\n                                                <Moment format=\"dddd\">{checkoutDate}</Moment>\n                                            </p>\n                                        </div>\n                                        <div className=\"travel-div\" onClick={() => {\n                                            setTravelModalShow(true)\n                                        }}>\n                                            <p>Travel</p>\n                                            <h1> 2 Guests</h1>\n                                            <p>2 Adults, 0 Children</p>\n                                            {\n                                                travelModalShow && \n                                                <>\n                                                <div className=\"add-room\" onClick={(e) => {\n                                                    e.stopPropagation();\n                                                }} \n                                                >\n                                                <div className=\"\">\n                                                    <div className=\"rooms-div\">\n                                                        <h4>Room 1</h4>\n                                                        <div className=\"d-flex adult-room-div\">\n                                                            <div className=\"flex-1\">\n                                                                <span className=\"adults-heading\">\n                                                                    Adults\n                                                                    <br />\n                                                                    <p>(12+ years)</p>\n                                                                </span>\n                                                            </div>\n                                                            <div className=\"flex-13\">\n                                                                <ul>\n                                                                    <li>1</li>\n                                                                    <li className=\"selected\">2</li>\n                                                                    <li>3</li>\n                                                                    <li>4</li>\n                                                                </ul>\n                                                                {/* <Radio.Group onChange={() => {}} defaultValue=\"2\">\n                                                                    <Radio.Button value=\"1\">1</Radio.Button>\n                                                                    <Radio.Button value=\"2\">2</Radio.Button>\n                                                                    <Radio.Button value=\"3\">3</Radio.Button>\n                                                                    <Radio.Button value=\"4\">4</Radio.Button>\n                                                                </Radio.Group> */}\n                                                            </div>\n                                                        </div>\n                                                        <div className=\"d-flex mt-3 child-room-div\">\n                                                            <div className=\"flex-1\">\n                                                                <span className=\"child-heading\">\n                                                                    Children\n                                                                    <br />\n                                                                    <p>(0 - 11 years)</p>\n                                                                </span>\n                                                            </div>\n                                                            <div  className=\"flex-13\">\n                                                                <ul>\n                                                                    <li className=\"selected\">0</li>\n                                                                    <li>1</li>\n                                                                    <li>2</li>\n                                                                </ul>\n                                                                {/* <Radio.Group onChange={() => {}} defaultValue=\"0\">\n                                                                    <Radio.Button value=\"0\">0</Radio.Button>\n                                                                    <Radio.Button value=\"1\">1</Radio.Button>\n                                                                    <Radio.Button value=\"2\">2</Radio.Button>\n                                                                </Radio.Group> */}\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                <hr />\n                                                <div className=\"\"></div>\n                                            </div>\n                                            </>\n                                            }\n                                            \n                                        </div>\n                                        <div className=\"nationality-div\">\n                                            <p>Nationality</p>\n                                            <h1>\n                                                <Autosuggest\n                                                    suggestions={nationalitySuggestions}\n                                                    onSuggestionsFetchRequested={onNationalitySuggestionsFetchRequested}\n                                                    onSuggestionsClearRequested={onNationalitySuggestionsClearRequested}\n                                                    getSuggestionValue={getNationalitySuggestionValue}\n                                                    renderSuggestion={renderNationalitySuggestion}\n                                                    inputProps={inputPropsNationality}\n                                                />\n                                            </h1>\n                                        </div>\n                                    </div>\n                                    <div className=\"text-center mt-3\">\n                                        <button type=\"button\" className=\"search-button\" onClick={onSearch}>Search</button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </section>\n            {\n            searching && \n            <section className=\"result-content\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-lg-12 text-center\">\n                            <p className=\"fs-20\">\n                                Searching ...\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </section>\n            }\n        </main>\n    )\n}\n\nexport default HotelSearch;","import axios from \"axios\";\nimport qs from 'qs';\nimport { CONFIG } from \"../../config/config\";\n\nexport const authRequest = () => {\n    return async (dispatch) => {\n        try {\n            dispatch({type: \"AUTH_REQUEST\", payload: {}});\n            let requestData = {\n                client_id: \"4s3b9f099keqs518398tenlp62\",\n                grant_type: \"client_credentials\",\n                scope: \"services/all\"\n            }\n            const { data: response } = await axios({\n                method: \"post\",\n                url: CONFIG.AUTH_API_URL,\n                headers: { \n                    \"content-type\": \"application/x-www-form-urlencoded\", \n                    \"Authorization\": `Basic ${CONFIG.BASIC_AUTH_TOKEN}` \n                },\n                data: qs.stringify(requestData)\n            });\n            // console.log(\"authRequest response => \", response);\n            dispatch({type: \"AUTH_REQUEST_SUCCESS\", payload: response});\n        } catch(err) {\n            console.log(\"error in changePasswordRequest => \", err);\n            dispatch({type: \"AUTH_REQUEST_ERROR\", payload: {message: \"Something went wrong\"}});\n        }\n    }\n}\n\nexport const authReset = () => {\n    return async (dispatch) => {\n        dispatch({type: \"AUTH_RESET\"});\n    }\n}","import axios from \"axios\";\nimport qs from 'qs';\nimport { CONFIG } from \"../../config/config\";\nimport store from \"../store\";\n\nexport const nationalityListRequest = () => {\n    return async (dispatch) => {\n        try {\n            const {authData} = store.getState();\n            dispatch({type: \"NATIONALITY_LIST_REQUEST\", payload: {}});\n            // console.log('authData => ', authData)\n            const { data: response } = await axios({\n                method: \"post\",\n                url: CONFIG.NATIONALITY_LIST_API_URL,\n                headers: {\n                    \"Authorization\": `Bearer ${authData?.payload?.access_token}` \n                },\n                data: {}\n            });\n            // console.log(\"nationalityListRequest response => \", response);\n            dispatch({type: \"NATIONALITY_LIST_REQUEST_SUCCESS\", payload: response});\n        } catch(err) {\n            console.log(\"error in nationalityListRequest => \", err);\n            dispatch({type: \"NATIONALITY_LIST_REQUEST_ERROR\", payload: {message: \"Something went wrong\"}});\n        }\n    }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport HotelSearch from './components/hotel-search/hotel-search';\n\nfunction App() {\n  return (\n    <HotelSearch />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  // <React.StrictMode>\n  <Provider store={store}>\n    <App />\n  </Provider>\n/* </React.StrictMode>, */\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}